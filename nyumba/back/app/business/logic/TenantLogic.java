package business.logic;

import models.persistence.Room;
import models.persistence.person.FormerTenant;
import models.persistence.person.Tenant;
import play.Logger;
import play.db.jpa.JPAApi;
import security.Secured;
import util.Args;
import util.ClientMsg;
import util.Mapper;

import javax.inject.Inject;
import java.util.Map;

/** This class handle logic related to tenant.
 * Created by kip on 7/21/17.
 */
public class TenantLogic {

    private static final Logger.ALogger logger = Logger.of(UserLogic.class);
    private final JPAApi jpaApi;
    private final Secured secured;
    private final Mapper mapper;
    private final RoomStatus roomStatus;

    @Inject
    public TenantLogic(JPAApi jpaApi, Secured secured, Mapper mapper, RoomStatus roomStatus){
        this.jpaApi = jpaApi; this.secured = secured; this.mapper = mapper; this.roomStatus = roomStatus;
    }

    public Object apply(Map<Args,Object> args) {

        Args.ACTIONS action = (Args.ACTIONS)args.get(Args.action);

        Object obj = args.get(Args.mappedObj);
        Tenant tenant = (Tenant) obj;

        //This function should be called only when we are registering a new person. Bill will be calculated.
        logger.debug("Tenant - Action: "+action);

        if(action == Args.ACTIONS.EDIT){
            if(tenant.getId() == null){
                //New tenant so we assign room and update bill. The update bill logic will figure out if actually necessary to update.
                jpaApi.em().persist(tenant);
                tenant.setRoom(jpaApi.em().find(Room.class,tenant.getParentId()));
                roomStatus.updateBill(tenant);
                return tenant;
            }
            else{
                //This is an existing tenant so we are potentially updating the tenant info
                Tenant existing = jpaApi.em().find(Tenant.class,tenant.getId());
                existing = (Tenant) this.mapper.mapFields(tenant,existing);
                return existing;
            }

        }else if(action == Args.ACTIONS.DELETE){
            tenant = jpaApi.em().find(Tenant.class,tenant.getId());
            FormerTenant formerTenant = new FormerTenant();
            this.mapper.mapFields(tenant,formerTenant);
            formerTenant.setBuildingName(tenant.getRoom().getBuilding().getName());
            formerTenant.setRoomName(tenant.getRoom().getName());
            formerTenant.setBal(tenant.getRoom().getBills().last().getBal());
            jpaApi.em().merge(formerTenant);
            jpaApi.em().remove(tenant);
            //A null message will be interpreted on the front end as a success message, and no popup will ge generated by the mobile app.
            return new ClientMsg(tenant.getId(),"deleted");
        }
        return obj;
    }
}
